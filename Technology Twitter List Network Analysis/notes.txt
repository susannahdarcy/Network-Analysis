
Follower Networks:
	Influencer = in-degree: do a table
	degree distribution
	reciprocity
		convert into a undriecred network: mutual follower relations



Bipartite Network
Centrality within each set.
	Degree
	Weight Degree
Make projected network?
	unweighted:	 p1 = bipartite.projected_graph(b, set1)
	weighted:	wp2 = bipartite.weighted_projected_graph(b, set2)wp2.nodes()
	p2.edges(data=True)

cooccrrence: associations between hastages
projection behaviour of twitters.

compare both of them: 
	import networkx.algorithms.isomorphism as iso
	em = iso.numerical_edge_match('weight', 1)
	print("Identical = %s" % nx.is_isomorphic(g2, g4, edge_match=em) )



Density:
Average path length
Diameter

Conectivty in directed:
	A directed network is said to be strongly connected 
		if every node is reachable from every other node
	nx.is_strongly_connected(g)
	nx.number_strongly_connected_components(g)

clustering (not sure if work for directed)

Centrality:
Degree
	In-degree: count of number of incoming edges for each node.
		dict( g.in_degree() )
		g.in_degree("B")
		nx.in_degree_centrality( g )
	Out-degree: count of number of outgoing edges for each node.
		dict( g.out_degree() )
Degree Distrbution
Betweeness	(not sure if work for directed)
Closeness	(not sure if work for directed)
Eigenvector	(not sure if work for directed)
	nx.out_degree_centrality( g )
